version: 2.1
jobs:
  rdflint:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - run:
          name: RDF Lint
          command: |
            .rdflint/check-vocabulary.sh content/z-sgov
            .rdflint/check-vocabulary.sh content/v-sgov
  sgov-validate:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - run:
          name: SGoV Validation
          no_output_timeout: 30m
          command: |
            gradle test --tests FolderLayoutTests --tests ConsistencyTests
      - run:
          name: Save validation results
          command: |
            mkdir -p test-results/junit/
            find . -type f -regex ".*/build/test-results/.*" -exec cp {} test-results/junit/ \;
          when: always
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results/junit
  deploy-to-etl-and-graphdb:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      PUBLIC_SLOVNIK_GOV_CZ_REPOSITORY: https://graphdb.onto.fel.cvut.cz/repositories/kodi-slovnik-gov-cz
      ASSEMBLY_LINE_REPOSITORY: https://xn--slovnk-7va.gov.cz/modelujeme/sluzby/db-server/repositories/assembly-line
      ASSEMBLY_LINE_DEV_REPOSITORY: https://xn--slovnk-test-scb.mvcr.gov.cz/modelujeme/sluzby/db-server/repositories/assembly-line
      CONTAINER: https://slovník.gov.cz
    steps:
      - checkout
      - run:
          name: Generate TRIG
          command: |
            gradle test --tests ExportSGoV --tests GenerateCanonicalContainer
      - run:
          name: Create a list of named graphs to remove from slovník.gov.cz
          command: |
            SGOV_SPARQL_SERVICE="https://xn--slovnk-7va.gov.cz/sparql" SGOV_SPARQL_SERVICE_NAMED_GRAPHS_FILE="../named-graphs-slovník-gov-cz.ttl" gradle test --tests cz.gov.ssp.ExportNamedGraphs
      - run:
          name: Save exported files
          command: |
            find . -type f -regex ".*/sgov.trig" -exec cp {} ~/sgov.trig \;
            find . -type f -regex ".*/sgov-graph-per-vocabulary.trig" -exec cp {} ~/sgov-graph-per-vocabulary.trig \;
            find . -type f -regex ".*/sgov-canonical-container.trig" -exec cp {} ~/sgov-canonical-container.trig \;
            find . -type f -regex ".*/named-graphs-slovník-gov-cz.ttl" -exec cp {} ~/named-graphs-slovník-gov-cz.ttl \;
          when: always
      - store_artifacts:
          path: sgov.trig
      - store_artifacts:
          path: named-graphs-slovník-gov-cz.ttl
      - store_artifacts:
          path: sgov-canonical-container.trig
      - store_artifacts:
          path: sgov-graph-per-vocabulary.trig
      - run:
          name: ETL - Clear named graphs
          command: |
            curl --location --request POST 'https://xn--slovnk-7va.gov.cz/etl/resources/executions?pipeline=https://slovn%C3%ADk.gov.cz/etl/resources/pipelines/1592406645132' \
            -u ${USERNAME}:${PASSWORD} \
            --form 'input=@./named-graphs-slovník-gov-cz.ttl'
      - run:
          name: ETL - Publish new version
          command: |
            curl --location --request POST 'https://xn--slovnk-7va.gov.cz/etl/resources/executions?pipeline=https://slovn%C3%ADk.gov.cz/etl/resources/pipelines/1592398255883' \
            -u ${USERNAME}:${PASSWORD} \
            --form 'input=@./sgov.trig'
      - run:
          name: GraphDB - Download default graph
          command: |
            curl --location --request POST "${PUBLIC_SLOVNIK_GOV_CZ_REPOSITORY}?infer=false" -o default.ttl \
            --header 'Content-Type: application/sparql-query' \
            --data-raw 'CONSTRUCT { ?s ?p ?o } FROM <http://www.ontotext.com/explicit> WHERE { ?s ?p ?o FILTER NOT EXISTS { GRAPH ?g { ?s ?p ?o } } }' \
            -u ${USERNAME_GRAPHDB}:${PASSWORD_GRAPHDB}
      - run:
          name: GraphDB - Clear repository
          command: |
            curl --location --request DELETE "${PUBLIC_SLOVNIK_GOV_CZ_REPOSITORY}/statements" \
                 -u ${USERNAME_GRAPHDB}:${PASSWORD_GRAPHDB}    
      - run:
          name: GraphDB - Publish new version
          command: |
            curl --location --request PUT "${PUBLIC_SLOVNIK_GOV_CZ_REPOSITORY}/statements" \
                 --header 'Content-Type: application/trig' \
                 --data-binary '@./sgov-graph-per-vocabulary.trig' \
                 -u ${USERNAME_GRAPHDB}:${PASSWORD_GRAPHDB}     
      - run:
          name: GraphDB - Upload default graph
          command: |
            curl --location --request POST "${PUBLIC_SLOVNIK_GOV_CZ_REPOSITORY}/rdf-graphs/service?default" \
                 --header 'Content-Type: text/turtle' \
                 --data-binary '@./default.ttl' \
                 -u ${USERNAME_GRAPHDB}:${PASSWORD_GRAPHDB}
      - run:
          name: (DEV) AL - Clear cache
          command: |
            bash bin/clear-cache.sh ${ASSEMBLY_LINE_DEV_REPOSITORY} ${CONTAINER} ${USERNAME_GRAPHDB} ${PASSWORD_GRAPHDB}
      - run:
          name: (DEV) AL - Uploading cache
          command: |
            bash bin/upload-cache.sh ${ASSEMBLY_LINE_DEV_REPOSITORY} ${USERNAME_GRAPHDB} ${PASSWORD_GRAPHDB}
      - run:
          name: (PROD) AL - Clear cache
          command: |
            bash bin/clear-cache.sh ${ASSEMBLY_LINE_REPOSITORY} ${CONTAINER} ${USERNAME_GRAPHDB} ${PASSWORD_GRAPHDB}
      - run:
          name: (PROD) AL - Uploading cache
          command: |
            bash bin/upload-cache.sh ${ASSEMBLY_LINE_REPOSITORY} ${USERNAME_GRAPHDB} ${PASSWORD_GRAPHDB}
workflows:
  version: 2
  validate:
    jobs:
      - rdflint
      - sgov-validate
  build-and-deploy:
    jobs:
      - deploy-to-etl-and-graphdb:
          filters:
            branches:
              only: master
